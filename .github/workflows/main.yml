name: CI
on:
  pull_request_target:
    types: [opened, synchronize, reopened, edited]
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  HT_BASE_URL: 'http://ht-sample-errors.hypertest.demo-k8s.hypertest.co'
  HT_COMMIT_HASH: '${{ github.event.pull_request.head.sha }}' ## required because checkout creates a detached commit with a different sha
  BRANCH_NAME: ${{ github.head_ref }}
  IMAGE_NAME: sample-errors
  IMAGE_TAG: ${{ github.head_ref }}-${{ github.event.pull_request.head.sha }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}


jobs:
  build:  
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Login to dockerhub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build and push docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          build-args: |
            PG_HOST_ARG=${{ secrets.PG_HOST }}
            PG_USER_ARG=${{ secrets.PG_USER }}
            PG_PASSWORD_ARG=${{ secrets.PG_PASSWORD }}
            PG_PORT_ARG=${{ secrets.PG_PORT }}
            PG_DB_ARG=${{ secrets.PG_DB }}
            JWT_SIGN_KEY_ARG=${{ secrets.JWT_SIGN_KEY }}

            
  deploy:  
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: ArgoCD CLI
        uses: clowdhaus/argo-cd-action/@main
        with:
          version: 2.5.5
          command: version
          options: --client
        env:
         # Only required for first step in job where API is called
         # All subsequent steps in a job will not re-download the CLI
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       

      - name: ArgoCD login and application deployment
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
          argocd app create sample-errors-${{ env.BRANCH_NAME }} --repo https://github.com/hypertestco/sample-errors  --revision argocd-manifest --path sample-errors/ --helm-set image.repository=${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }} --helm-set image.tag=${{ env.IMAGE_TAG }} --helm-set ingress.hosts[0].host=${{ env.BRANCH_NAME }}-sample-errors.demo-k8s.hypertest.co --helm-set ingress.hosts[0].paths[0].path=/ --helm-set ingress.hosts[0].paths[0].pathType=Prefix --project default  --sync-policy automated --sync-option Prune=true --sync-option -CreateNamespace=true --dest-server https://kubernetes.default.svc --dest-namespace sample-errors --upsert
          # argocd app set sample-errors-${{ env.BRANCH_NAME }} --helm-set image.tag=${{ env.IMAGE_TAG }}
          # argocd app sync sample-errors-${{ env.BRANCH_NAME }}


      - name: Wait for application deployment to come up
        uses: nev7n/wait_for_response@v1
        with:
          url: 'http://${{ env.BRANCH_NAME }}-sample-errors.demo-k8s.hypertest.co/app/ping'
          responseCode: 200
          timeout: 20000
          interval: 5000
      
  hypertest-test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Download hypertest ci
      run: wget -O ht-cli.tar.xz https://hypertest-binaries-1.s3.ap-south-1.amazonaws.com/ht-cli/ht-cli-latest.tar.xz && tar xvf ht-cli.tar.xz
    
    - name: HyperTest can run test
      run: ./hypertest can-run-test

    - name: HyperTest start new test
      run: ./hypertest start-new-test -c ${{ env.BRANCH_NAME }}-sample-errors.demo-k8s.hypertest.co
